poetry add fastapi alembic sqlalchemy asyncpg uvicorn
    RestAPI - это декларация, сущности-представления. Сущности это объекты бд, а представления это как их отображают
    у  RestAPI  иного url который мы дергаем
    есть декларации что нужно делать с этими url
    сейчас отображают через json, раньше использовали HSM
    альтернативы gRPC - больше подходит для микросервисов
                 GraphQL - один url

    Индепотентсность - когда a складываем с 0 получаем a, а когда что-то множим на 1 получаем х

у RestAPI есть метода - операции
     HTTP метод GET - получение, чтение ресурса   HTTP 200 (ок), Json XML
                                                  HTTP 404 (Not found) HTTP 400 (Bad request)
            Идемпотентный, получение данных, не меняет состояние сервера
     HTTP метод Post - создание нового ресурса/ов отправляет представление (json)
                                                  HTTP 201 (Create)
     HTTP метод Put (patch) - обновление ресурса HTTP 200 (ок)
                                                 HTTP 204  - если не было передано какой-то контент в теле ответа
     HTTP метод Delete HTTP 200 (ок)  HTTP 204 (no content)

-
Коди ответов HTTP
    информационные 100 - 199
        100: Continue
    успешные 200 - 299
        200: ok
        201: created
        202: accepted
        204: no content
    перенаправление 300-399
        301:Moved Permanently
        307: Temporary Redirect
    клиентские ошибки 400-499
         400:Bad Content
         401:Unauthorized
         403:Forbidden
         404:Not Found
    Серверные ошибки 500-599
         500: Internal Server Error
         501: Not Implemented
         502: Bad Gateway
         503: Service Unavailable
         504: Gateway Timeout
alembic:
    go to root path
    alembic init <name folder for migrations>
    alembic revision --autogenerate -m 'Init'

запуск сервера uvicorn main:app --reload

авторизация
           { keycloak - сторонний сервер
            amazon cognito - сторонний сервер
            jwt (json web token) }

poetry add 'python-jose[cryptography]'

user -> login        -> server login:email.pass
user <- access token <- server
       refresh token

user бегает к серверу с  access token, через 10-15 минут access token притухает и user идет на refresh token
и просим новую пару access token  refresh token

user -> refresh token    -> server
user <- new access token <- server
       refresh token
когда серверу возвращают  refresh token мы можем его обновлять а может и не обновлять все зависит от того
какой логику поведения мы хотим предпринять
если часто заходить на условный сайт он почти никогда не просит ввести логин и пароль
(потом введем юзеров в роуты)
но если я хочу четко чтоб через месяц пользователь обязательно ввел логин и пароль тогда я refresh token не обновляю
и прислаю полюзовалю оди и тотже и через месяц ( рефреш токен живет месяц )
и через месяц ты введешь логин и пароль
если польщователь ходит кождый день, чтоб не завставлять вводить логин и пароль я постоянно рефреш токен обновляю
и это рефреш токен постоянно жиет месяц, вперед
но если не захожить на сайт целый месяц, то через месяц ты введешь логин и пароль

